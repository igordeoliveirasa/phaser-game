extends layout

block content
    h1= title
    p Welcome to #{title}

    script.

        COLOR = {
            BLACK : "#000000",
            WHITE: "#ffffff",
            BLUE: "#0000ff"
        };

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min );
        }

        function createCircle(game, x, y, w, color) {
            // Create BitmapData
            var bmd = game.add.bitmapData(w, w)

            // Draw circle
            bmd.ctx.fillStyle = color;
            bmd.ctx.beginPath();
            bmd.ctx.arc(w/2, w/2, w/2, 0, Math.PI*2, true);
            bmd.ctx.closePath();
            bmd.ctx.fill();

            var sprite = game.add.sprite(x, y, bmd);
            return sprite;
        };


        function createPlayer(game, x, y, w, color) {
            var player = createCircle(game, x, y, w, color);
            game.physics.arcade.enable(player);
            player.body.collideWorldBounds = true;
            player.body.bounce.y=0.25;
            return player;
        }

        var Organism = function(game, x, y, w, color) {
            this._organism = createPlayer(game, x, y, w, color)
            this.angle = 0;
            this.speed = 0.0;
            this.maxSpeed = 5;
            this.acceleration = 0.1;
            this.reduction = 0.5;

            this.update = function(isUpDown, isLeftDown, isRightDown) {
                if (isUpDown || isLeftDown || isRightDown) {
                    if (isUpDown)
                    {
                        this.speed = this.speed + this.acceleration;
                    }
                    if (isLeftDown) {
                        this.angle = this.angle - (this.acceleration*2);
                    }
                    else if (isRightDown) {
                        this.angle = this.angle + (this.acceleration*2);
                    }
                }
                else
                {
                    if (this.speed > 0) {
                        this.speed = this.speed - this.reduction;
                    }

                    if (this.speed < 0) {
                        this.speed = 0;
                    }
                }

                var scale_x = Math.cos(this.angle);
                var scale_y = Math.sin(this.angle);

                if (this.speed>this.maxSpeed) {
                    this.speed = this.maxSpeed;
                }

                var velocity_x = this.speed * scale_x;
                var velocity_y = this.speed * scale_y;

                lastX = this._organism.x;
                lastY = this._organism.y;

                this._organism.x = this._organism.x + velocity_x;
                this._organism.y = this._organism.y + velocity_y;
            }
        }

        function createFood(game, x, y, w, color) {
            var sprite = createCircle(game, x, y, w, color);
            return sprite;
        }

        screenWidth = 800;
        screenHeight = 600;

        game = new Phaser.Game(screenWidth, screenHeight, Phaser.AUTO, '', {preload: preload, create: create, update: update});
        maxFood = 200;

        function create() {
            game.physics.startSystem(Phaser.Physics.ARCADE);
        };

        function preload() {
            //scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

            game.stage.backgroundColor =  COLOR.WHITE;

            cursors = game.input.keyboard.createCursorKeys();

            //player = createPlayer(game, 200, 200, 10, COLOR.BLACK);
            organism = new Organism(game, 200, 200, 10, COLOR.BLACK);


            foods = game.add.group();
            foods.enableBody = true;
            for (var i=0; i<maxFood; i++) {
                var x = getRandomInt(0, screenWidth);
                var y = getRandomInt(0, screenHeight);
                foods.add(createFood(game, x, y, 5, COLOR.BLUE));
            }

        };


        function hasEaten(organism, food) {
            //player.x =  lastX;
            //player.y = lastY;
            food.kill();
        }

        function update() {

            //game.physics.arcade.collide(player, foods);
            game.physics.arcade.overlap(organism._organism, foods, hasEaten, null, this);
            organism.update(cursors.up.isDown, cursors.left.isDown, cursors.right.isDown);

            // Reset the players velocity (movement)
            /*
            if (cursors.up.isDown || cursors.left.isDown || cursors.right.isDown) {
                if (cursors.up.isDown)
                {
                    speed = speed + acceleration;
                }
                if (cursors.left.isDown) {
                    angle = angle - (acceleration*2);
                }
                else if (cursors.right.isDown) {
                    angle = angle + (acceleration*2);
                }
            }
            else
            {
                if (speed > 0) {
                    speed = speed - reduction;
                }

                if (speed < 0) {
                    speed = 0;
                }
            }

            var scale_x = Math.cos(angle);
            var scale_y = Math.sin(angle);

            if (speed>maxSpeed) {
                speed = maxSpeed;
            }

            var velocity_x = speed * scale_x;
            var velocity_y = speed * scale_y;

            lastX = player.x;
            lastY = player.y;

            player.x = player.x + velocity_x;
            player.y = player.y + velocity_y;
            */
        };
