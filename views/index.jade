extends layout

block content
    h1= title
    p A combination of neural networks and genetic algorithm

    script.

        // using ml / neural networks
        var x = [
            [0.0, 0.0],
            [0.0, 1.0],
            [1.0, 0.0],
            [1.0, 1.0]
        ];

        var y = [
            [1],
            [0],
            [0],
            [1]
        ];

        var mlp = new ml.MLP({
            'input' : x,
            'label' : y,
            'n_ins' : x[0].length,
            'n_outs' : y[0].length,
            'hidden_layer_sizes' : [3] // it coud be something like: [3,3,3] or [3,4,5] or anything
        });

        mlp.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.
        mlp.train({
            'lr' : 0.6,
            'epochs' : 20000
        });

        a = [
            [0.0, 0.0],
            [0.0, 1.0],
            [1.0, 0.0],
            [1.0, 1.0]
        ];

        console.log(mlp.predict(a));

        // --------------------------------------------------------------------

        COLOR = {
            BLACK : "#000000",
            WHITE: "#ffffff",
            BLUE: "#0000ff",
            RED: "#ff0000"
        };

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min );
        }

        function createCircle(game, x, y, w, lineWidthInString, strokeStyle, fillStyle) {
            // Create BitmapData
            var bmd = game.add.bitmapData(w, w)

            // Draw circle
            bmd.ctx.beginPath();

            if (strokeStyle) {
                bmd.ctx.strokeStyle = strokeStyle;
                bmd.ctx.stroke();
            }

            if (lineWidthInString) {
                bmd.ctx.lineWidth = lineWidthInString;
            }

            bmd.ctx.arc(w / 2, w / 2, w / 2, 0, Math.PI * 2, true);
            if (fillStyle) {
                bmd.ctx.fillStyle = fillStyle;
                bmd.ctx.fill();
            }

            bmd.ctx.closePath();

            var sprite = game.add.sprite(x, y, bmd);
            return sprite;
        };


        function createPlayer(game, x, y, w, color) {
            var player = createCircle(game, x, y, w, null, null, color);
            game.physics.arcade.enable(player);
            player.body.collideWorldBounds = true;
            player.body.bounce.y=0.25;
            return player;
        }

        function outstandCircle(game, x, y, w) {
            var sprite = createCircle(game, x, y, w, null, null, 'rgba(255,0,0,0.5)');
            return sprite;
        }

        function createFood(game, x, y, w, color) {
            var sprite = createCircle(game, x, y, w, null, null, color);
            return sprite;
        }

        function calculateDistance(x1, y1, x2, y2) {
            var xs = 0;
            var ys = 0;
            xs = Math.abs(x2 - x1);
            xs = xs * xs;

            ys = Math.abs(y2 - y1);
            ys = ys * ys;
            return Math.sqrt(xs + ys);
        }

        var Organism = function(game, x, y, w, color) {
            this._organism = createPlayer(game, x, y, w, color)
            this.angle = 0;
            this.speed = 0.0;
            this.maxSpeed = 5;
            this.acceleration = 0.1;
            this.reduction = 0.5;
            this.closestFood = null;

            this.getClosestFood = function(foods) {
                var closestDistance = null;//calculateDistance(this._organism.x, this._organism.y, foods.children[0].x, foods.children[0].y);
                var closestFood = null;//foods.children[0];

                for (var i=0; i<foods.children.length; i++) {
                    var food = foods.getAt(i);
                    if (food.alive) {
                        var distance = calculateDistance(this._organism.x, this._organism.y, food.x, food.y);
                        if ( !closestDistance || !closestFood || distance < closestDistance) {
                            closestDistance = distance;
                            closestFood = food;
                        }
                    }
                }
                if (this.closestFood) {
                    this.closestFood.kill();
                }
                if (closestFood) {
                    this.closestFood = outstandCircle(game, closestFood.x - 5, closestFood.y - 5, 15, "40", COLOR.RED);
                }
            }

            this.update = function(isUpDown, isLeftDown, isRightDown) {
                if (isUpDown || isLeftDown || isRightDown) {
                    if (isUpDown)
                    {
                        this.speed += this.acceleration;
                    }
                    if (isLeftDown) {
                        this.angle -= 5 + this.speed;//(this.speed);
                    }
                    else if (isRightDown) {
                        this.angle += 5 + this.speed;//(this.speed);
                    }
                }

                if (!isUpDown)
                {
                    if (this.speed > 0) {
                        this.speed = this.speed - this.reduction;
                    }

                    if (this.speed < 0) {
                        this.speed = 0;
                    }
                }

                if (this.angle > 360) {
                    this.angle -= 360;
                }
                if (this.angle < -360) {
                    this.angle += 360;
                }

                lastX = this._organism.x;
                lastY = this._organism.y;
                if (this.speed > this.maxSpeed) {
                    this.speed = this.maxSpeed;
                }

                var radians = Math.PI/180 * this.angle;
                this._organism.x += this.speed * Math.cos(radians);
                this._organism.y += this.speed * Math.sin(radians);
            }
        }

        screenWidth = 800;
        screenHeight = 600;

        game = new Phaser.Game(screenWidth, screenHeight, Phaser.AUTO, '', {preload: preload, create: create, update: update});
        maxFood = 200;

        function create() {
            game.physics.startSystem(Phaser.Physics.ARCADE);
        };

        function preload() {
            //scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

            game.stage.backgroundColor =  COLOR.WHITE;

            cursors = game.input.keyboard.createCursorKeys();

            foods = game.add.group();
            foods.enableBody = true;
            for (var i=0; i<maxFood; i++) {
                var x = getRandomInt(0, screenWidth);
                var y = getRandomInt(0, screenHeight);
                foods.add(createFood(game, x, y, 5, COLOR.BLUE));
            }

            organism = new Organism(game, 200, 200, 10, COLOR.BLACK);
        };


        function hasEaten(organism, food) {
            //player.x =  lastX;
            //player.y = lastY;
            food.kill();
        }

        function update() {
            //game.physics.arcade.collide(player, foods);
            game.physics.arcade.overlap(organism._organism, foods, hasEaten, null, this);
            organism.getClosestFood(foods);
            organism.update(cursors.up.isDown, cursors.left.isDown, cursors.right.isDown);
        };
