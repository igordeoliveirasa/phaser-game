extends layout

block content
    h1= title
    p A combination of neural networks and genetic algorithm

    script.

        function createFood(game, x, y, w, color) {
            var sprite = createCircle(game, x, y, w, null, null, color);
            return sprite;
        }

        function getClosestFood(organism, foods) {
            var closestDistance = null
            var closestFood = null;

            for (var i=0; i<foods.children.length; i++) {
                var food = foods.getAt(i);
                if (food.alive) {
                    var distance = calculateDistance(organism._organism.x, organism._organism.y, food.x, food.y);
                    if ( !closestDistance || !closestFood || distance < closestDistance) {
                        closestDistance = distance;
                        closestFood = food;
                    }
                }
            }
            return closestFood;
        }

        screenWidth = 500;
        screenHeight = 500;

        lblGeneration = "Generation: 0";
        game = new Phaser.Game(screenWidth, screenHeight, Phaser.AUTO, '', {preload: preload, create: create, update: update});
        maxFood = 50;

        var foods = null;

        MAX_ORGANISMS = 50;
        brains = [];
        organisms = [];
        generation = 0;
        generationTimeInSeconds = 5;


        STARTED = false;

        function sortByHighestScore(organisms) {
            return organisms.sort(function(organismA, organismB) {
                return (organismB.score - organismA.score);
            });
        }

        function createFoods() {
            var foods = game.add.group();
            foods.enableBody = true;
            for (var i = 0; i < maxFood; i++) {
                foods.add(createFood(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 5, COLOR.BLUE));
            }
            return foods;
        }



        function generationManager(){

            STARTED = false;
            generation += 1;

            var brains = [];
            var newPopulation = [];

            if (generation==1) {
                // generating organisms
                for (var i = 0; i < MAX_ORGANISMS; i++) {
                    var brain = createBrain();
                    fillBrainRandomically(brain)
                    //brains.push(brain);
                    var organism = new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, brain, 0);
                    newPopulation.push(organism);
                }
            }
            else {
                game.world.removeAll();

                // sorting from highest to lowest
                var sorted = sortByHighestScore(organisms);

                // splitting males and females
                var males = [];
                var females = [];
                for (var i=0; i<sorted.length; i++) {
                    if (i % 2 == 0) {
                        males.push(sorted[i]);
                    } else {
                        females.push(sorted[i]);
                    }
                }

                // crossing them
                var newPopulationCount = newPopulation.length;
                var i = 0;
                while (newPopulationCount <= MAX_ORGANISMS) {
                    if (i>=Math.floor(sorted.length/2)) {
                        i = 0;
                    }

                    var male = males[i];
                    var female = females[i];

                    //console.log("crossing: " + male.score + " with: " + female.score);

                    if (male.score > 0 && female.score > 0) {
                        var score = 0//Math.floor((male.score+female.score)/2);

                        var brainA = crossoverAvg(male, female);
                        newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, brainA, score));

                        var brainB = mutate(crossoverAvg(male, female));
                        newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, brainB, score));

                        //newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, mutate(brainA), score));
                        //newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, mutate(brainB), score));

                        //                        var brainA = crossoverMod(male, female);
                        //                        newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, brainA, score));
                        //
                        //                        var brainB = crossoverMod(female, male);
                        //                        newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, brainB, score));
                        //
                        //                        newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, mutate(brainA), score));
                        //                        newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, mutate(brainB), score));
                    }

                    i += 1;
                    newPopulationCount = newPopulation.length;
                }


                //                for (var i = newPopulation.length; i < MAX_ORGANISMS; i++) {
                //                    var brain = createBrain();
                //                    fillBrainRandomically(brain);
                //                    newPopulation.push(new Organism(game, getRandomInt(0, screenWidth), getRandomInt(0, screenHeight), 10, getRandomInt(0, 360), COLOR.BLACK, brain, 0));
                //                }
            }


            // creating creatures
            foods = createFoods();


            organisms = [];
            for (var i = 0; i < newPopulation.length; i++) {
                var organism = newPopulation[i];
                organism.firstClosestFood = getClosestFood(organism, foods);
                organisms.push(organism);
            }

            lblGeneration = game.add.text(16, 16, 'Generation: ' + generation, { fontSize: '16px', fill: '#000' });
            lbPopulation = game.add.text(16, 36, 'Population: ' + organisms.length, {fontSize: '16px', fill: '#000'});


            STARTED = true;

            setTimeout(function(){ generationManager() }, generationTimeInSeconds * 1000);
        };

        function create() {
            game.physics.startSystem(Phaser.Physics.ARCADE);
        };

        function preload() {
            game.stage.backgroundColor =  COLOR.WHITE;
            cursors = game.input.keyboard.createCursorKeys();
            generationManager();
        };

        currentKilledFood = null;
        function hasEaten(organism, food) {
            food.kill();
            currentKilledFood = food;
        }

        function update() {
            //game.physics.arcade.collide(player, foods);

            if (STARTED) {
                for (var i=0; i<organisms.length; i++) {
                    var organism = organisms[i];
                    if (game.physics.arcade.overlap(organism._organism, foods, hasEaten, null, this)) {
                        if (currentKilledFood == organism.target) {
                            organism.score += 1;
                        }
                    };

                    /*
                    if (organism.closestFood) {
                        organism.closestFood.kill();
                    }*/


                    if (!organism.target || !organism.target.alive) {
                        organism.target = getClosestFood(organism, foods);
                    }
                    if (organism.target) {
                        //closestFood = outstandCircle(game, closestFood.x - 5, closestFood.y - 5, 15, "40", COLOR.RED);
                        //var prediction = organism.brain.predict([[organism._organism.x, organism._organism.y, organism.angle, organism.speed, closestFood.x, closestFood.y]]);
                        var prediction = organism.brain.predict([[organism._organism.x, organism._organism.y, organism.angle/100.0, organism.target.x, organism.target.y]]);
                        var up = prediction[0][0] >= 0.5;
                        var left = prediction[0][1] >= 0.5;
                        var right = prediction[0][2] >= 0.5;
                        //console.log(isUpDown + " - " + isLeftDown + " - " + isRightDown)
                        //console.log(prediction[0][0] + " - " + prediction[0][1] + " - " + prediction[0][2])
                        organism.update(up, left, right);
                    }
                    // keyboard
                    //organism.update(cursors.up.isDown, cursors.left.isDown, cursors.right.isDown);
                }
            }
        };
